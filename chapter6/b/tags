!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARDStruct	boot/loader.asm	/^ARDStruct		equ	BaseOfLoaderPhyAddr + _ARDStruct$/;"	d
ASM	Makefile	/^ASM		= nasm$/;"	m
ASMBFLAGS	Makefile	/^ASMBFLAGS	= -I boot\/include\/$/;"	m
ASMKFLAGS	Makefile	/^ASMKFLAGS	= -I include\/ -f elf$/;"	m
BaseOfStack	boot/boot.asm	/^BaseOfStack		equ	0100h	; 调试状态下堆栈基地址(栈底, 从这个位置向低地址生长)$/;"	d
BaseOfStack	boot/boot.asm	/^BaseOfStack		equ	07c00h	; Boot状态下堆栈基地址(栈底, 从这个位置向低地址生长)$/;"	d
BaseOfStack	boot/loader.asm	/^BaseOfStack	equ	0100h$/;"	d
BootMessage	boot/boot.asm	/^BootMessage:		db	"Booting  "; 9字节, 不够则用空格补齐. 序号 0$/;"	d
CC	Makefile	/^CC		= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		= -I include\/ -c -fno-builtin -fno-stack-protector$/;"	m
DASM	Makefile	/^DASM	= ndisasm$/;"	m
DASMFLAGS	Makefile	/^DASMFLAGS	= -u -o $(ENTRYPOINT) -e $(ENTRYOFFSET)$/;"	m
DASMOUTPUT	Makefile	/^DASMOUTPUT	= kernel.bin.asm$/;"	m
DA_32	include/protect.h	103;"	d
DA_386CGate	include/protect.h	121;"	d
DA_386IGate	include/protect.h	122;"	d
DA_386TGate	include/protect.h	123;"	d
DA_386TSS	include/protect.h	120;"	d
DA_C	include/protect.h	113;"	d
DA_CCO	include/protect.h	115;"	d
DA_CCOR	include/protect.h	116;"	d
DA_CR	include/protect.h	114;"	d
DA_DPL0	include/protect.h	105;"	d
DA_DPL1	include/protect.h	106;"	d
DA_DPL2	include/protect.h	107;"	d
DA_DPL3	include/protect.h	108;"	d
DA_DR	include/protect.h	110;"	d
DA_DRW	include/protect.h	111;"	d
DA_DRWA	include/protect.h	112;"	d
DA_LDT	include/protect.h	118;"	d
DA_LIMIT_4K	include/protect.h	104;"	d
DA_TaskGate	include/protect.h	119;"	d
DESCRIPTOR	include/protect.h	/^}DESCRIPTOR;$/;"	t	typeref:struct:s_descriptor
DispAL	boot/loader.asm	/^DispAL:$/;"	l
DispInt	boot/loader.asm	/^DispInt:$/;"	l
DispMemInfo	boot/loader.asm	/^DispMemInfo:$/;"	l
DispReturn	boot/loader.asm	/^DispReturn:$/;"	l
DispStr	boot/boot.asm	/^DispStr:$/;"	l
DispStr	boot/loader.asm	/^DispStr:$/;"	l
DispStrRealMode	boot/loader.asm	/^DispStrRealMode:$/;"	l
ENTRYOFFSET	Makefile	/^ENTRYOFFSET	=   0x400$/;"	m
ENTRYPOINT	Makefile	/^ENTRYPOINT	= 0x30400$/;"	m
EXTERN	include/const.h	11;"	d
EXTERN	include/global.h	10;"	d
EXTERN	include/global.h	9;"	d
FALSE	include/const.h	19;"	d
GATE	include/protect.h	/^}GATE;$/;"	t	typeref:struct:s_gate
GDT_SIZE	include/const.h	22;"	d
GLOBAL_VARIABLES_HERE	kernel/global.c	7;"	d	file:
GdtLen	boot/loader.asm	/^GdtLen		equ	$ - LABEL_GDT$/;"	d
GdtPtr	boot/loader.asm	/^GdtPtr		dw	GdtLen - 1				; 段界限$/;"	d
GetFATEntry	boot/boot.asm	/^GetFATEntry:$/;"	l
GetFATEntry	boot/loader.asm	/^GetFATEntry:$/;"	l
IDT_SIZE	include/const.h	24;"	d
INDEX_DUMMY	include/protect.h	68;"	d
INDEX_FLAT_C	include/protect.h	69;"	d
INDEX_FLAT_RW	include/protect.h	70;"	d
INDEX_LDT_FIRST	include/protect.h	73;"	d
INDEX_TSS	include/protect.h	72;"	d
INDEX_VIDEO	include/protect.h	71;"	d
INT_M_CTL	include/const.h	37;"	d
INT_M_CTLMASK	include/const.h	38;"	d
INT_S_CTL	include/const.h	39;"	d
INT_S_CTLMASK	include/const.h	40;"	d
INT_VECTOR_BOUNDS	include/protect.h	131;"	d
INT_VECTOR_BREAKPOINT	include/protect.h	129;"	d
INT_VECTOR_COPROC_ERR	include/protect.h	141;"	d
INT_VECTOR_COPROC_NOT	include/protect.h	133;"	d
INT_VECTOR_COPROC_SEG	include/protect.h	135;"	d
INT_VECTOR_DEBUG	include/protect.h	127;"	d
INT_VECTOR_DIVIDE	include/protect.h	126;"	d
INT_VECTOR_DOUBLE_FAULT	include/protect.h	134;"	d
INT_VECTOR_INVAL_OP	include/protect.h	132;"	d
INT_VECTOR_INVAL_TSS	include/protect.h	136;"	d
INT_VECTOR_IRQ0	include/protect.h	144;"	d
INT_VECTOR_IRQ8	include/protect.h	145;"	d
INT_VECTOR_NMI	include/protect.h	128;"	d
INT_VECTOR_OVERFLOW	include/protect.h	130;"	d
INT_VECTOR_PAGE_FAULT	include/protect.h	140;"	d
INT_VECTOR_PROTECTION	include/protect.h	139;"	d
INT_VECTOR_SEG_NOT	include/protect.h	137;"	d
INT_VECTOR_STACK_FAULT	include/protect.h	138;"	d
InitKernel	boot/loader.asm	/^InitKernel:	; 遍历每一个 Program Header，根据 Program Header 中的信息来确定把什么放进内存，放到什么位置，以及放多少。$/;"	l
KernelFileName	boot/loader.asm	/^KernelFileName		db	"KERNEL  BIN", 0	; KERNEL.BIN 之文件名$/;"	d
KillMotor	boot/loader.asm	/^KillMotor:$/;"	l
LABEL_CMP_FILENAME	boot/boot.asm	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_CMP_FILENAME	boot/loader.asm	/^LABEL_CMP_FILENAME:$/;"	l
LABEL_DATA	boot/loader.asm	/^LABEL_DATA:$/;"	l
LABEL_DESC_FLAT_C	boot/loader.asm	/^LABEL_DESC_FLAT_C:		Descriptor             0,              0fffffh, DA_CR  | DA_32 | DA_LIMIT_4K			; 0 ~ 4G$/;"	l
LABEL_DESC_FLAT_RW	boot/loader.asm	/^LABEL_DESC_FLAT_RW:		Descriptor             0,              0fffffh, DA_DRW | DA_32 | DA_LIMIT_4K			; 0 ~ 4G$/;"	l
LABEL_DESC_VIDEO	boot/loader.asm	/^LABEL_DESC_VIDEO:		Descriptor	 0B8000h,               0ffffh, DA_DRW                         | DA_DPL3	; 显存首地址$/;"	l
LABEL_DIFFERENT	boot/boot.asm	/^LABEL_DIFFERENT:$/;"	l
LABEL_DIFFERENT	boot/loader.asm	/^LABEL_DIFFERENT:$/;"	l
LABEL_EVEN_2	boot/boot.asm	/^LABEL_EVEN_2:$/;"	l
LABEL_EVEN_2	boot/loader.asm	/^LABEL_EVEN_2:$/;"	l
LABEL_FILENAME_FOUND	boot/boot.asm	/^LABEL_FILENAME_FOUND:			; 找到 LOADER.BIN 后便来到这里继续$/;"	l
LABEL_FILENAME_FOUND	boot/loader.asm	/^LABEL_FILENAME_FOUND:			; 找到 KERNEL.BIN 后便来到这里继续$/;"	l
LABEL_FILE_LOADED	boot/boot.asm	/^LABEL_FILE_LOADED:$/;"	l
LABEL_FILE_LOADED	boot/loader.asm	/^LABEL_FILE_LOADED:$/;"	l
LABEL_GDT	boot/loader.asm	/^LABEL_GDT:			Descriptor             0,                    0, 0						; 空描述符$/;"	l
LABEL_GET_FAT_ENRY_OK	boot/boot.asm	/^LABEL_GET_FAT_ENRY_OK:$/;"	l
LABEL_GET_FAT_ENRY_OK	boot/loader.asm	/^LABEL_GET_FAT_ENRY_OK:$/;"	l
LABEL_GOON_LOADING_FILE	boot/boot.asm	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOON_LOADING_FILE	boot/loader.asm	/^LABEL_GOON_LOADING_FILE:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/boot.asm	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR	boot/loader.asm	/^LABEL_GOTO_NEXT_SECTOR_IN_ROOT_DIR:$/;"	l
LABEL_GO_ON	boot/boot.asm	/^LABEL_GO_ON:$/;"	l
LABEL_GO_ON	boot/loader.asm	/^LABEL_GO_ON:$/;"	l
LABEL_NO_KERNELBIN	boot/loader.asm	/^LABEL_NO_KERNELBIN:$/;"	l
LABEL_NO_LOADERBIN	boot/boot.asm	/^LABEL_NO_LOADERBIN:$/;"	l
LABEL_PM_START	boot/loader.asm	/^LABEL_PM_START:$/;"	l
LABEL_SEARCH_FOR_KERNELBIN	boot/loader.asm	/^LABEL_SEARCH_FOR_KERNELBIN:$/;"	l
LABEL_SEARCH_FOR_LOADERBIN	boot/boot.asm	/^LABEL_SEARCH_FOR_LOADERBIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/boot.asm	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_SEARCH_IN_ROOT_DIR_BEGIN	boot/loader.asm	/^LABEL_SEARCH_IN_ROOT_DIR_BEGIN:$/;"	l
LABEL_START	boot/boot.asm	/^LABEL_START:	$/;"	l
LABEL_START	boot/loader.asm	/^LABEL_START:			; <--- 从这里开始 *************$/;"	l
LD	Makefile	/^LD		= ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS		= -s -Ttext $(ENTRYPOINT)$/;"	m
LDT_SIZE	include/protect.h	87;"	d
LoadMessage	boot/loader.asm	/^LoadMessage:		db	"Loading  "$/;"	d
LoaderFileName	boot/boot.asm	/^LoaderFileName		db	"LOADER  BIN", 0	; LOADER.BIN 之文件名$/;"	d
MemChkBuf	boot/loader.asm	/^MemChkBuf		equ	BaseOfLoaderPhyAddr + _MemChkBuf$/;"	d
MemCpy	boot/loader.asm	/^MemCpy:$/;"	l
Message1	boot/boot.asm	/^Message1		db	"Ready.   "; 9字节, 不够则用空格补齐. 序号 1$/;"	d
Message1	boot/loader.asm	/^Message1		db	"Ready.   "$/;"	d
Message2	boot/boot.asm	/^Message2		db	"No LOADER"; 9字节, 不够则用空格补齐. 序号 2$/;"	d
Message2	boot/loader.asm	/^Message2		db	"No KERNEL"$/;"	d
MessageLength	boot/boot.asm	/^MessageLength		equ	9$/;"	d
MessageLength	boot/loader.asm	/^MessageLength		equ	9$/;"	d
NR_TASKS	include/proc.h	41;"	d
OBJS	Makefile	/^OBJS		= kernel\/kernel.o kernel\/start.o kernel\/main.o kernel\/i8259.o kernel\/global.o kernel\/protect.o lib\/klib.o lib\/kliba.o lib\/string.o$/;"	m
ORANGESBOOT	Makefile	/^ORANGESBOOT	= boot\/boot.bin boot\/loader.bin$/;"	m
ORANGESKERNEL	Makefile	/^ORANGESKERNEL	= kernel.bin$/;"	m
PRIVATE	include/const.h	15;"	d
PRIVILEGE_KRNL	include/const.h	27;"	d
PRIVILEGE_TASK	include/const.h	28;"	d
PRIVILEGE_USER	include/const.h	29;"	d
PROCESS	include/proc.h	/^}PROCESS;$/;"	t	typeref:struct:s_proc
PUBLIC	include/const.h	14;"	d
RPL_KRNL	include/const.h	32;"	d
RPL_TASK	include/const.h	33;"	d
RPL_USER	include/const.h	34;"	d
ReadSector	boot/boot.asm	/^ReadSector:$/;"	l
ReadSector	boot/loader.asm	/^ReadSector:$/;"	l
SA_RPL0	include/protect.h	93;"	d
SA_RPL1	include/protect.h	94;"	d
SA_RPL2	include/protect.h	95;"	d
SA_RPL3	include/protect.h	96;"	d
SA_RPL_MASK	include/protect.h	92;"	d
SA_TIG	include/protect.h	99;"	d
SA_TIL	include/protect.h	100;"	d
SA_TI_MASK	include/protect.h	98;"	d
SECTION	kernel/kernel.asm	/^SECTION .bss]$/;"	l
SELECTOR_DUMMY	include/protect.h	75;"	d
SELECTOR_FLAT_C	include/protect.h	76;"	d
SELECTOR_FLAT_RW	include/protect.h	77;"	d
SELECTOR_KERNEL_CS	include/protect.h	82;"	d
SELECTOR_KERNEL_DS	include/protect.h	83;"	d
SELECTOR_KERNEL_GS	include/protect.h	84;"	d
SELECTOR_LDT_FIRST	include/protect.h	80;"	d
SELECTOR_TSS	include/protect.h	79;"	d
SELECTOR_VIDEO	include/protect.h	78;"	d
STACK_FRAME	include/proc.h	/^}STACK_FRAME;$/;"	t	typeref:struct:s_stackframe
STACK_SIZE_TESTA	include/proc.h	44;"	d
STACK_SIZE_TOTAL	include/proc.h	46;"	d
SelectorFlatC	boot/loader.asm	/^SelectorFlatC		equ	LABEL_DESC_FLAT_C	- LABEL_GDT$/;"	d
SelectorFlatRW	boot/loader.asm	/^SelectorFlatRW		equ	LABEL_DESC_FLAT_RW	- LABEL_GDT$/;"	d
SelectorVideo	boot/loader.asm	/^SelectorVideo		equ	LABEL_DESC_VIDEO	- LABEL_GDT + SA_RPL3$/;"	d
SetupPaging	boot/loader.asm	/^SetupPaging:$/;"	l
StackSpace	boot/loader.asm	/^StackSpace:	times	1000h	db	0$/;"	l
StackSpace	kernel/kernel.asm	/^StackSpace		resb	2 * 1024$/;"	l
StackTop	kernel/kernel.asm	/^StackTop:		; 栈顶$/;"	l
TRUE	include/const.h	18;"	d
TSS	include/protect.h	/^}TSS;$/;"	t	typeref:struct:s_tss
TestA	kernel/main.c	/^void TestA()$/;"	f
TopOfStack	boot/loader.asm	/^TopOfStack	equ	BaseOfLoaderPhyAddr + $	; 栈顶$/;"	d
_ARDStruct	boot/loader.asm	/^_ARDStruct:			; Address Range Descriptor Structure$/;"	l
_MemChkBuf	boot/loader.asm	/^_MemChkBuf:	times	256	db	0$/;"	l
_ORANGES_CONST_H_	include/const.h	8;"	d
_ORANGES_PROTECT_H_	include/protect.h	9;"	d
_ORANGES_TYPE_H_	include/type.h	9;"	d
_dwBaseAddrHigh	boot/loader.asm	/^	_dwBaseAddrHigh:	dd	0$/;"	d
_dwBaseAddrLow	boot/loader.asm	/^	_dwBaseAddrLow:		dd	0$/;"	d
_dwDispPos	boot/loader.asm	/^_dwDispPos:			dd	(80 * 6 + 0) * 2	; 屏幕第 6 行, 第 0 列。$/;"	d
_dwLengthHigh	boot/loader.asm	/^	_dwLengthHigh:		dd	0$/;"	d
_dwLengthLow	boot/loader.asm	/^	_dwLengthLow:		dd	0$/;"	d
_dwMCRNumber	boot/loader.asm	/^_dwMCRNumber:			dd	0	; Memory Check Result$/;"	d
_dwMemSize	boot/loader.asm	/^_dwMemSize:			dd	0$/;"	d
_dwType	boot/loader.asm	/^	_dwType:		dd	0$/;"	d
_start	kernel/kernel.asm	/^_start:     ;地址为0x30400$/;"	l
_szMemChkTitle	boot/loader.asm	/^_szMemChkTitle:			db	"BaseAddrL BaseAddrH LengthLow LengthHigh   Type", 0Ah, 0$/;"	d
_szRAMSize	boot/loader.asm	/^_szRAMSize:			db	"RAM size:", 0$/;"	d
_szReturn	boot/loader.asm	/^_szReturn:			db	0Ah, 0$/;"	d
attr	include/protect.h	/^	u8	attr;		\/* P(1) DPL(2) DT(1) TYPE(4) *\/$/;"	m	struct:s_gate
attr1	include/protect.h	/^	u8	attr1;			\/* P(1) DPL(2) DT(1) TYPE(4) *\/$/;"	m	struct:s_descriptor
bOdd	boot/boot.asm	/^bOdd			db	0		; 奇数还是偶数$/;"	d
bOdd	boot/loader.asm	/^bOdd			db	0		; 奇数还是偶数$/;"	d
backlink	include/protect.h	/^	u32	backlink;$/;"	m	struct:s_tss
base_high	include/protect.h	/^	u8	base_high;		\/* Base *\/$/;"	m	struct:s_descriptor
base_low	include/protect.h	/^	u16	base_low;		\/* Base *\/$/;"	m	struct:s_descriptor
base_mid	include/protect.h	/^	u8	base_mid;		\/* Base *\/$/;"	m	struct:s_descriptor
bits	kernel/kernel.asm	/^bits	32$/;"	l
bounds_check	kernel/kernel.asm	/^bounds_check:$/;"	l
breakpoint_exception	kernel/kernel.asm	/^breakpoint_exception:$/;"	l
copr_error	kernel/kernel.asm	/^copr_error:$/;"	l
copr_not_available	kernel/kernel.asm	/^copr_not_available:$/;"	l
copr_seg_overrun	kernel/kernel.asm	/^copr_seg_overrun:$/;"	l
cr3	include/protect.h	/^	u32	cr3;$/;"	m	struct:s_tss
cs	include/proc.h	/^	u32	cs;		\/* |                                    *\/$/;"	m	struct:s_stackframe
cs	include/protect.h	/^	u32	cs;$/;"	m	struct:s_tss
csinit	kernel/kernel.asm	/^csinit:								;注意这里当利用bochs设置0x30430为断点的时候，然后按s执行（因为这样才会进函数），按n不会进函数，执行完毕后会卡顿，这个时候在虚拟机中按键盘，那么就会触发hwint01，就会跳转到函数spurious_irq$/;"	l
cstart	kernel/start.c	/^PUBLIC void cstart()$/;"	f
dcount	include/protect.h	/^	u8	dcount;		\/* 该字段只在调用门描述符中有效。如果在利用$/;"	m	struct:s_gate
dec	boot/boot.asm	/^	dec	dx					; ┛就跳到下一个 Sector$/;"	d
dec	boot/boot.asm	/^dec	cx$/;"	l
dec	boot/loader.asm	/^	dec	dx					; ┛$/;"	d
delay	lib/klib.c	/^PUBLIC void delay(int time)$/;"	f
disp_color_str	lib/kliba.asm	/^disp_color_str:$/;"	l
disp_int	lib/klib.c	/^PUBLIC void disp_int(int input)$/;"	f
disp_pos	include/global.h	/^EXTERN	int		          disp_pos;$/;"	v
disp_str	lib/kliba.asm	/^disp_str:$/;"	l
divide_error	kernel/kernel.asm	/^divide_error:$/;"	l
double_fault	kernel/kernel.asm	/^double_fault:$/;"	l
ds	include/proc.h	/^	u32	ds;		\/* |                                    *\/$/;"	m	struct:s_stackframe
ds	include/protect.h	/^	u32	ds;$/;"	m	struct:s_tss
dw	boot/boot.asm	/^dw 	0xaa55				; 结束标志$/;"	l
dwBaseAddrHigh	boot/loader.asm	/^	dwBaseAddrHigh	equ	BaseOfLoaderPhyAddr + _dwBaseAddrHigh$/;"	d
dwBaseAddrLow	boot/loader.asm	/^	dwBaseAddrLow	equ	BaseOfLoaderPhyAddr + _dwBaseAddrLow$/;"	d
dwDispPos	boot/loader.asm	/^dwDispPos		equ	BaseOfLoaderPhyAddr + _dwDispPos$/;"	d
dwKernelSize	boot/loader.asm	/^dwKernelSize		dd	0		; KERNEL.BIN 文件大小$/;"	d
dwLengthHigh	boot/loader.asm	/^	dwLengthHigh	equ	BaseOfLoaderPhyAddr + _dwLengthHigh$/;"	d
dwLengthLow	boot/loader.asm	/^	dwLengthLow	equ	BaseOfLoaderPhyAddr + _dwLengthLow$/;"	d
dwMCRNumber	boot/loader.asm	/^dwMCRNumber		equ	BaseOfLoaderPhyAddr + _dwMCRNumber$/;"	d
dwMemSize	boot/loader.asm	/^dwMemSize		equ	BaseOfLoaderPhyAddr + _dwMemSize$/;"	d
dwType	boot/loader.asm	/^	dwType		equ	BaseOfLoaderPhyAddr + _dwType$/;"	d
eax	include/proc.h	/^	u32	eax;		\/* \/                                    *\/$/;"	m	struct:s_stackframe
eax	include/protect.h	/^	u32	eax;$/;"	m	struct:s_tss
ebp	include/proc.h	/^	u32	ebp;		\/* |                                    *\/$/;"	m	struct:s_stackframe
ebp	include/protect.h	/^	u32	ebp;$/;"	m	struct:s_tss
ebx	include/proc.h	/^	u32	ebx;		\/* |                                    *\/$/;"	m	struct:s_stackframe
ebx	include/protect.h	/^	u32	ebx;$/;"	m	struct:s_tss
ecx	include/proc.h	/^	u32	ecx;		\/* |                                    *\/$/;"	m	struct:s_stackframe
ecx	include/protect.h	/^	u32	ecx;$/;"	m	struct:s_tss
edi	include/proc.h	/^	u32	edi;		\/* |                                    *\/$/;"	m	struct:s_stackframe
edi	include/protect.h	/^	u32	edi;$/;"	m	struct:s_tss
edx	include/proc.h	/^	u32	edx;		\/* |                                    *\/$/;"	m	struct:s_stackframe
edx	include/protect.h	/^	u32	edx;$/;"	m	struct:s_tss
eflags	include/proc.h	/^	u32	eflags;		\/* | pushed by CPU during interrupt     *\/$/;"	m	struct:s_stackframe
eip	include/proc.h	/^	u32	eip;		\/* \\                                    *\/$/;"	m	struct:s_stackframe
eip	include/protect.h	/^	u32	eip;$/;"	m	struct:s_tss
es	include/proc.h	/^	u32	es;		\/* |                                    *\/$/;"	m	struct:s_stackframe
es	include/protect.h	/^	u32	es;$/;"	m	struct:s_tss
esi	include/proc.h	/^	u32	esi;		\/* | pushed by save()                   *\/$/;"	m	struct:s_stackframe
esi	include/protect.h	/^	u32	esi;$/;"	m	struct:s_tss
esp	include/proc.h	/^	u32	esp;		\/* |                                    *\/$/;"	m	struct:s_stackframe
esp	include/protect.h	/^	u32	esp;$/;"	m	struct:s_tss
esp0	include/protect.h	/^	u32	esp0;	\/* stack pointer to use during interrupt *\/$/;"	m	struct:s_tss
esp1	include/protect.h	/^	u32	esp1;$/;"	m	struct:s_tss
esp2	include/protect.h	/^	u32	esp2;$/;"	m	struct:s_tss
exception	kernel/kernel.asm	/^exception:$/;"	l
exception_handler	kernel/protect.c	/^PUBLIC void exception_handler(int vec_no,int err_code,int eip,int cs,int eflags)$/;"	f
extern	kernel/kernel.asm	/^extern	cstart				; 再start.c中$/;"	l
extern	kernel/kernel.asm	/^extern	disp_pos ; 再global.h中$/;"	l
extern	kernel/kernel.asm	/^extern	exception_handler	; 再protect.c中$/;"	l
extern	kernel/kernel.asm	/^extern	gdt_ptr  ; 再global.h中$/;"	l
extern	kernel/kernel.asm	/^extern	idt_ptr	 ; 在global.h中$/;"	l
extern	kernel/kernel.asm	/^extern	kernel_main$/;"	l
extern	kernel/kernel.asm	/^extern	p_proc_ready$/;"	l
extern	kernel/kernel.asm	/^extern	spurious_irq		; 在i8259.c中$/;"	l
extern	kernel/kernel.asm	/^extern	tss$/;"	l
extern	lib/kliba.asm	/^extern disp_pos ; 这个变量在global.h中声明，但是是在global.c中进行定义的（因为开始的那个宏），值为0$/;"	l
flags	include/protect.h	/^	u32	flags;$/;"	m	struct:s_tss
fs	include/proc.h	/^	u32	fs;		\/* |                                    *\/$/;"	m	struct:s_stackframe
fs	include/protect.h	/^	u32	fs;$/;"	m	struct:s_tss
gdt	include/global.h	/^EXTERN	DESCRIPTOR	 gdt[GDT_SIZE];$/;"	v
gdt_ptr	include/global.h	/^EXTERN	u8		        gdt_ptr[6];	\/* 0~15:Limit  16~47:Base *\/$/;"	v
general_protection	kernel/kernel.asm	/^general_protection:$/;"	l
global	kernel/kernel.asm	/^global  hwint00$/;"	l
global	kernel/kernel.asm	/^global  hwint01$/;"	l
global	kernel/kernel.asm	/^global  hwint02$/;"	l
global	kernel/kernel.asm	/^global  hwint03$/;"	l
global	kernel/kernel.asm	/^global  hwint04$/;"	l
global	kernel/kernel.asm	/^global  hwint05$/;"	l
global	kernel/kernel.asm	/^global  hwint06$/;"	l
global	kernel/kernel.asm	/^global  hwint07$/;"	l
global	kernel/kernel.asm	/^global  hwint08$/;"	l
global	kernel/kernel.asm	/^global  hwint09$/;"	l
global	kernel/kernel.asm	/^global  hwint10$/;"	l
global	kernel/kernel.asm	/^global  hwint11$/;"	l
global	kernel/kernel.asm	/^global  hwint12$/;"	l
global	kernel/kernel.asm	/^global  hwint13$/;"	l
global	kernel/kernel.asm	/^global  hwint14$/;"	l
global	kernel/kernel.asm	/^global  hwint15$/;"	l
global	kernel/kernel.asm	/^global _start	; 导出 _start$/;"	l
global	kernel/kernel.asm	/^global bounds_check$/;"	l
global	kernel/kernel.asm	/^global breakpoint_exception$/;"	l
global	kernel/kernel.asm	/^global copr_error$/;"	l
global	kernel/kernel.asm	/^global copr_not_available$/;"	l
global	kernel/kernel.asm	/^global copr_seg_overrun$/;"	l
global	kernel/kernel.asm	/^global divide_error$/;"	l
global	kernel/kernel.asm	/^global double_fault$/;"	l
global	kernel/kernel.asm	/^global general_protection$/;"	l
global	kernel/kernel.asm	/^global inval_opcode$/;"	l
global	kernel/kernel.asm	/^global inval_tss$/;"	l
global	kernel/kernel.asm	/^global nmi$/;"	l
global	kernel/kernel.asm	/^global overflow$/;"	l
global	kernel/kernel.asm	/^global page_fault$/;"	l
global	kernel/kernel.asm	/^global restart$/;"	l
global	kernel/kernel.asm	/^global segment_not_present$/;"	l
global	kernel/kernel.asm	/^global single_step_exception$/;"	l
global	kernel/kernel.asm	/^global stack_exception$/;"	l
global	lib/kliba.asm	/^global	disp_color_str$/;"	l
global	lib/kliba.asm	/^global	disp_str$/;"	l
global	lib/kliba.asm	/^global	in_byte$/;"	l
global	lib/kliba.asm	/^global	out_byte$/;"	l
global	lib/string.asm	/^global	memcpy$/;"	l
gs	include/proc.h	/^	u32	gs;		\/* \\                                    *\/$/;"	m	struct:s_stackframe
gs	include/protect.h	/^	u32	gs;$/;"	m	struct:s_tss
hwint00	kernel/kernel.asm	/^hwint00:                ; Interrupt routine for irq 0 (the clock).$/;"	l
hwint01	kernel/kernel.asm	/^hwint01:                ; Interrupt routine for irq 1 (keyboard)$/;"	l
hwint02	kernel/kernel.asm	/^hwint02:                ; Interrupt routine for irq 2 (cascade!)$/;"	l
hwint03	kernel/kernel.asm	/^hwint03:                ; Interrupt routine for irq 3 (second serial)$/;"	l
hwint04	kernel/kernel.asm	/^hwint04:                ; Interrupt routine for irq 4 (first serial)$/;"	l
hwint05	kernel/kernel.asm	/^hwint05:                ; Interrupt routine for irq 5 (XT winchester)$/;"	l
hwint06	kernel/kernel.asm	/^hwint06:                ; Interrupt routine for irq 6 (floppy)$/;"	l
hwint07	kernel/kernel.asm	/^hwint07:                ; Interrupt routine for irq 7 (printer)$/;"	l
hwint08	kernel/kernel.asm	/^hwint08:                ; Interrupt routine for irq 8 (realtime clock).$/;"	l
hwint09	kernel/kernel.asm	/^hwint09:                ; Interrupt routine for irq 9 (irq 2 redirected)$/;"	l
hwint10	kernel/kernel.asm	/^hwint10:                ; Interrupt routine for irq 10$/;"	l
hwint11	kernel/kernel.asm	/^hwint11:                ; Interrupt routine for irq 11$/;"	l
hwint12	kernel/kernel.asm	/^hwint12:                ; Interrupt routine for irq 12$/;"	l
hwint13	kernel/kernel.asm	/^hwint13:                ; Interrupt routine for irq 13 (FPU exception)$/;"	l
hwint14	kernel/kernel.asm	/^hwint14:                ; Interrupt routine for irq 14 (AT winchester)$/;"	l
hwint15	kernel/kernel.asm	/^hwint15:                ; Interrupt routine for irq 15$/;"	l
idt	include/global.h	/^EXTERN	GATE	     idt[IDT_SIZE];$/;"	v
idt_ptr	include/global.h	/^EXTERN	u8			    idt_ptr[6];	\/* 0~15:Limit  16~47:Base *\/$/;"	v
in_byte	lib/kliba.asm	/^in_byte:$/;"	l
inc	boot/boot.asm	/^	inc	di$/;"	d
inc	boot/loader.asm	/^	inc	di$/;"	d
init_8259A	kernel/i8259.c	/^PUBLIC void init_8259A()$/;"	f
init_descriptor	kernel/protect.c	/^PRIVATE void init_descriptor(DESCRIPTOR *p_desc,u32 base,u32 limit,u16 attribute)$/;"	f
init_idt_desc	kernel/protect.c	/^PRIVATE void init_idt_desc(unsigned char vector, u8 desc_type,int_handler handler, unsigned char privilege)$/;"	f
init_prot	kernel/protect.c	/^PUBLIC void init_prot()$/;"	f
int_handler	include/type.h	/^typedef	void	(*int_handler)	();  \/* 函数指针，int_handler是一个指针,他的值为地址 *\/$/;"	t
inval_opcode	kernel/kernel.asm	/^inval_opcode:$/;"	l
inval_tss	kernel/kernel.asm	/^inval_tss:$/;"	l
iobase	include/protect.h	/^	u16	iobase;	\/* I\/O位图基址大于或等于TSS段界限，就表示没有I\/O许可位图 *\/$/;"	m	struct:s_tss
itoa	lib/klib.c	/^PUBLIC char * itoa(char * str, int num)$/;"	f
kernel_esp	include/proc.h	/^	u32	kernel_esp;	\/* <- 'popad' will ignore it            *\/$/;"	m	struct:s_stackframe
kernel_main	kernel/main.c	/^PUBLIC int kernel_main()$/;"	f
ldt	include/protect.h	/^	u32	ldt;$/;"	m	struct:s_tss
ldt_sel	include/proc.h	/^	u16 ldt_sel;               \/* gdt selector giving ldt base and limit *\/$/;"	m	struct:s_proc
ldts	include/proc.h	/^	DESCRIPTOR ldts[LDT_SIZE]; \/* local descriptors for code and data *\/$/;"	m	struct:s_proc
limit_high_attr2	include/protect.h	/^	u8	limit_high_attr2;	\/* G(1) D(1) 0(1) AVL(1) LimitHigh(4) *\/$/;"	m	struct:s_descriptor
limit_low	include/protect.h	/^	u16	limit_low;		\/* Limit *\/$/;"	m	struct:s_descriptor
memcpy	lib/string.asm	/^memcpy:$/;"	l
memset	lib/string.asm	/^memset:$/;"	l
mul	boot/boot.asm	/^	mul	dh$/;"	d
mul	boot/loader.asm	/^	mul	dh$/;"	d
nmi	kernel/kernel.asm	/^nmi:$/;"	l
offset_high	include/protect.h	/^	u16	offset_high;	\/* Offset High *\/$/;"	m	struct:s_gate
offset_low	include/protect.h	/^	u16	offset_low;	\/* Offset Low *\/$/;"	m	struct:s_gate
org	boot/loader.asm	/^org  0100h$/;"	l
out_byte	lib/kliba.asm	/^out_byte:$/;"	l
overflow	kernel/kernel.asm	/^overflow:$/;"	l
p_name	include/proc.h	/^	char p_name[16];           \/* name of the process *\/$/;"	m	struct:s_proc
p_proc_ready	include/global.h	/^EXTERN	PROCESS*	  p_proc_ready;$/;"	v
page_fault	kernel/kernel.asm	/^page_fault:$/;"	l
pid	include/proc.h	/^	u32 pid;                   \/* process id passed in from MM *\/$/;"	m	struct:s_proc
pop	boot/boot.asm	/^	pop	dx$/;"	d
pop	boot/loader.asm	/^	pop	dx$/;"	d
pop	kernel/kernel.asm	/^	pop	ds$/;"	d
proc_table	kernel/global.c	/^PUBLIC	PROCESS			proc_table[NR_TASKS];$/;"	v
push	boot/boot.asm	/^	push	dx$/;"	d
push	boot/loader.asm	/^	push	dx$/;"	d
regs	include/proc.h	/^	STACK_FRAME regs;          \/* process registers saved in stack frame *\/$/;"	m	struct:s_proc
restart	kernel/kernel.asm	/^restart:$/;"	l
retaddr	include/proc.h	/^	u32	retaddr;	\/* return addr for kernel.asm::save()   *\/$/;"	m	struct:s_stackframe
s_descriptor	include/protect.h	/^typedef struct s_descriptor		\/* 共 8 个字节 *\/$/;"	s
s_gate	include/protect.h	/^typedef struct s_gate$/;"	s
s_proc	include/proc.h	/^typedef struct s_proc {$/;"	s
s_stackframe	include/proc.h	/^typedef struct s_stackframe {$/;"	s
s_tss	include/protect.h	/^typedef struct s_tss {$/;"	s
seg2phys	kernel/protect.c	/^PUBLIC u32 seg2phys(u16 seg)$/;"	f
segment_not_present	kernel/kernel.asm	/^segment_not_present:$/;"	l
selector	include/protect.h	/^	u16	selector;	\/* Selector *\/$/;"	m	struct:s_gate
single_step_exception	kernel/kernel.asm	/^single_step_exception:$/;"	l
spurious_irq	kernel/i8259.c	/^PUBLIC void spurious_irq(int irq)$/;"	f
ss	include/proc.h	/^	u32	ss;		\/* \/                                    *\/$/;"	m	struct:s_stackframe
ss	include/protect.h	/^	u32	ss;$/;"	m	struct:s_tss
ss0	include/protect.h	/^	u32	ss0;	\/*   "   segment  "  "    "        "     *\/$/;"	m	struct:s_tss
ss1	include/protect.h	/^	u32	ss1;$/;"	m	struct:s_tss
ss2	include/protect.h	/^	u32	ss2;$/;"	m	struct:s_tss
stack_exception	kernel/kernel.asm	/^stack_exception:$/;"	l
szMemChkTitle	boot/loader.asm	/^szMemChkTitle		equ	BaseOfLoaderPhyAddr + _szMemChkTitle$/;"	d
szRAMSize	boot/loader.asm	/^szRAMSize		equ	BaseOfLoaderPhyAddr + _szRAMSize$/;"	d
szReturn	boot/loader.asm	/^szReturn		equ	BaseOfLoaderPhyAddr + _szReturn$/;"	d
task_stack	kernel/global.c	/^PUBLIC	char			task_stack[STACK_SIZE_TOTAL];$/;"	v
times	boot/boot.asm	/^times 	510-($-$$)	db	0	; 填充剩下的空间，使生成的二进制代码恰好为512字节$/;"	l
trap	include/protect.h	/^	u16	trap;$/;"	m	struct:s_tss
tss	include/global.h	/^EXTERN	TSS					   tss;$/;"	v
u16	include/type.h	/^typedef	unsigned short		u16;    \/* 一个 short 2字节16位 *\/$/;"	t
u32	include/type.h	/^typedef	unsigned int		u32;    \/* 一个 int 4字节32位 *\/$/;"	t
u8	include/type.h	/^typedef	unsigned char		u8;     \/* 一个 char 1字节8位 *\/$/;"	t
vir2phys	include/protect.h	149;"	d
wRootDirSizeForLoop	boot/boot.asm	/^wRootDirSizeForLoop	dw	RootDirSectors	; Root Directory 占用的扇区数, 在循环中会递减至零.$/;"	d
wRootDirSizeForLoop	boot/loader.asm	/^wRootDirSizeForLoop	dw	RootDirSectors	; Root Directory 占用的扇区数$/;"	d
wSectorNo	boot/boot.asm	/^wSectorNo		dw	0		; 要读取的扇区号$/;"	d
wSectorNo	boot/loader.asm	/^wSectorNo		dw	0		; 要读取的扇区号$/;"	d
